/*********************************************************************
*
*文件：hpfloat.h
*功能：
*备注：
*
*********************************************************************/
#ifndef __HPFLOAT_H__
#define __HPFLOAT_H__


#define HP_LENGTH			100
#define HP_POWER_LIMIT		100

#ifndef NO_ERROR
#define NO_ERROR			0	// 没有错误
#endif
#define OVER_FLOW			1	// 溢出
#define DIVIDE_ZERO			2	// 除0错误
#define FUN_ERROR			3	// 函数调用错误
#define MEM_ERROR			4	// 内存分配错误

// 高精度浮点数类型
typedef  struct hpfloat
{
	int bits[HP_LENGTH];
	int sign;
	int power;
	int error;
} hpfloat;

/*************************************函数****************************/
/*****************************************************************
*函数：hp_zero()
*功能：将高精度数清零
******************************************************************/
extern void hp_zero(hpfloat *result);


/****************************************************************
*函数：hp_int_to_hp()
*功能：把int转换为高精度浮点数
******************************************************************/
extern hpfloat *hp_int_to_hp(hpfloat *hp_num, int num);


/****************************************************************
*函数：hp_cmp()
*功能：比较两个高精度数的大小
******************************************************************/
extern int hp_cmp(const hpfloat *num1, const hpfloat *num2);



/****************************************************************
*函数：hp_abs_cmp()
*功能：比较两个高精度数的绝对值的大小
******************************************************************/
extern int hp_abs_cmp(const hpfloat *num1, const hpfloat *num2);



/***********************************************************************
*函数：hp_add()
*功能：高精度加法
**********************************************************************/
extern hpfloat *hp_add(const hpfloat *num1, const hpfloat *num2, hpfloat *result);



/***********************************************************************
*函数：hp_sub()
*功能：高精度减法
**********************************************************************/
extern hpfloat *hp_sub(const hpfloat *num1, const hpfloat *num2, hpfloat *result);


/******************************************************************
*函数：hp_mul()
*功能：实现乘法运算
*****************************************************************/
extern hpfloat *hp_mul(const hpfloat *multiplicand, const hpfloat *multiplier, hpfloat *result);


/****************************************************************
****函数：hp_div()
功能：实现除法运算
**************************************************************/
extern hpfloat *hp_div(const hpfloat *divider, const hpfloat *divisor, hpfloat *result);


/******************************************************************
*函数：hp_add_int()
*功能：实现高精度数和int的加法运算
*****************************************************************/
extern hpfloat *hp_add_int(hpfloat *hp_num, int num);


/******************************************************************
****函数：hp_sub_int()
****功能：实现高精度数和int的加法运算
*****************************************************************/
extern hpfloat *hp_sub_int(hpfloat *hp_num, int num);


/******************************************************************
****函数：hp_mul_int()
****功能：实现高精度数和int的乘法运算
*****************************************************************/
extern hpfloat *hp_mul_int(hpfloat *hp_num, int num);


/****************************************************************
****函数：hp_div_int()
功能：实现高精度除以int运算
**************************************************************/
extern hpfloat *hp_div_int(hpfloat *hp_num, int num);



/****************************************************************
*函数：hp_pi()
*功能：得到值为pi(圆周率)的高精度浮点数
**************************************************************/
extern const hpfloat *hp_pi(void);



/****************************************************************
*函数：hp_e()
*功能：得到值为e(自然指数的底)的高精度浮点数
**************************************************************/
extern const hpfloat *hp_e(void);



/****************************************************************
*函数：hp_to_str()
*功能：把高精度数转化为字符串
**************************************************************/
char *hp_to_str(const hpfloat *hp_num, char *str);


#endif